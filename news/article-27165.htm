<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freessrnode.github.io/news/article-27165.htm" />
    <title>基于springBoot动态配置定时任务</title>
        <meta name="description" content="场景描述: 在生产环境中,有时要临时调整定时任务时间,或者禁用/启用定时任务; 以前都是修改cron表达式后重启项目; 总是感觉这个操作有点麻烦,不够方便, 于是,想实现一个动态的配置处理!!! 功能" />
        <link rel="icon" href="/assets/website/img/freessrnode/favicon.ico" type="image/x-icon"/>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Muli:300,400,700,900" rel="stylesheet">
    <link rel="stylesheet" href="__ADDON__/fonts/freessrnode/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/jquery-ui.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/jquery.fancybox.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/bootstrap-datepicker.css">
    <link rel="stylesheet" href="__ADDON__/fonts/freessrnode/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/aos.css">
    <link href="/assets/website/css/freessrnode/jquery.mb.YTPlayer.min.css" media="all" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/style.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-2KPLB94DVG"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-2KPLB94DVG');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".site-navbar-target" data-offset="300" data-page="detail">
    <div class="site-wrap">
                <div class="site-mobile-menu site-navbar-target">
            <div class="site-mobile-menu-header">
                <div class="site-mobile-menu-close mt-3">
                    <span class="icon-close2 js-menu-toggle"></span>
                </div>
            </div>
            <div class="site-mobile-menu-body"></div>
        </div>
        <div class="py-2 bg-light">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-9 d-none d-lg-block">
                        
                    </div>
                </div>
            </div>
        </div>
        <header class="site-navbar py-4 js-sticky-header site-navbar-target" role="banner">
            <div class="container">
                <div class="d-flex align-items-center">
                    <div class="site-logo">
                                                <a href="/" class="d-block">
                            <span>Free SSR Node</span>
                        </a>
                                            </div>
                    <div class="mr-auto">
                        <nav class="site-navigation position-relative text-right" role="navigation">
                            <ul class="site-menu main-menu js-clone-nav mr-auto d-none d-lg-block">
                                                                <li>
                                    <a href="/" class="nav-link text-left">首页</a>
                                </li>
                                                                <li>
                                    <a href="/free-nodes/" class="nav-link text-left">免费节点</a>
                                </li>
                                                                <li>
                                    <a href="/paid-subscribe/" class="nav-link text-left">推荐机场</a>
                                </li>
                                                                <li>
                                    <a href="/news/" class="nav-link text-left">新闻资讯</a>
                                </li>
                                                                <li>
                                    <a href="#" class="nav-link text-left">关于</a>
                                </li>
                                <li>
                                    <a href="#" class="nav-link text-left">联系</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                    <div class="ml-auto">
                        <div class="social-wrap">
                            <a href="#"><span class="icon-facebook"></span></a>
                            <a href="#"><span class="icon-twitter"></span></a>
                            <a href="#"><span class="icon-linkedin"></span></a>
                            <a href="#" class="d-inline-block d-lg-none site-menu-toggle js-menu-toggle text-black"><span class="icon-menu h3"></span></a>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div class="intro-section small" style="background-image: url('__ADDON__/img/freessrnode/hero_1.jpg');">
            <div class="container">
                <div class="row align-items-center justify-content-center">
                    <div class="col-md-7 mx-auto text-center" data-aos="fade-up">
                        <div class="intro">
                            <h1>基于springBoot动态配置定时任务</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="site-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>场景描述:</p> <p>在生产环境中,有时要临时调整定时任务时间,或者禁用/启用定时任务; 以前都是修改cron表达式后重启项目; 总是感觉这个操作有点麻烦,不够方便, 于是,想实现一个动态的配置处理!!!</p> <p>功能实现:</p> <p>1.代码结构:</p> <p><img fetchpriority="high" decoding="async" alt="" height="324" src="http://img.555519.xyz/uploads/20230109/019cdec4d2e24c82ee1fd3c8a0000dbb.jpg"></p> <p>2.代码实现:</p> <p>2.1 创建定时任务配置表</p> <pre><code class="language-sql">CREATE TABLE `scheduled` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `task_key` varchar(127) NOT NULL COMMENT '任务key值（使用bean名称）',   `name` varchar(127) DEFAULT NULL COMMENT '任务名称',   `cron` varchar(63) NOT NULL COMMENT '任务表达式',   `status` int(2) DEFAULT '0' COMMENT '状态(0.禁用; 1.启用)',   `create_time` timestamp NULL DEFAULT NULL COMMENT '创建时间',   `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',   PRIMARY KEY (`id`),   UNIQUE KEY `uniqu_task_key` (`task_key`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='定时任务配置表';</code></pre> <p>2.2 java代码</p> <p>2.2.1 创建定时任务线程池</p> <pre><code class="language-java">package com.yihaocard.main.scheduled.config;  import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;  /**  * @ClassName ScheduledTaskConfig  * @Description 创建定时任务线程池,初始化任务Map  * @Author lv617  * @Date 2020/9/8 10:39  * @Version 1.0  */ @Slf4j @Configuration public class ScheduledTaskConfig {      @Bean     public ThreadPoolTaskScheduler threadPoolTaskScheduler() {         log.info("创建定时任务调度线程池 start");         ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();         threadPoolTaskScheduler.setPoolSize(20);         threadPoolTaskScheduler.setThreadNamePrefix("taskExecutor-");         //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean，这样这些异步任务的销毁就会先于Redis线程池的销毁。         threadPoolTaskScheduler.setWaitForTasksToCompleteOnShutdown(true);         //该方法用来设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住。         threadPoolTaskScheduler.setAwaitTerminationSeconds(60);         log.info("创建定时任务调度线程池 end");         return threadPoolTaskScheduler;     } } </code></pre> <p>2.2.2 初始化启动定时任务</p> <pre><code class="language-java">package com.yihaocard.main.scheduled.config;  import com.yihaocard.main.scheduled.ScheduledTaskService; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component;  /**  * @ClassName ScheduledTaskRunner  * @Description 项目启动完毕后开启需要自启的任务  * @Author lv617  * @Date 2020/9/8 11:35  * @Version 1.0  */ @Slf4j @Component public class ScheduledTaskRunner implements ApplicationRunner {      @Autowired     private ScheduledTaskService scheduledTaskService;      /**      * 程序启动完毕后,需要自启的任务      */     @Override     public void run(ApplicationArguments applicationArguments){         log.info(" &gt;&gt;&gt;&gt;&gt;&gt; 项目启动完毕, 开启 =&gt; 需要自启的任务 开始!");         scheduledTaskService.initAllTask();         log.info(" &gt;&gt;&gt;&gt;&gt;&gt; 项目启动完毕, 开启 =&gt; 需要自启的任务 结束！");     } } </code></pre> <p>2.2.3 定时任务状态枚举类</p> <pre><code class="language-java">package com.yihaocard.main.scheduled.constant;  /**  * Created by lynn on 2018/4/17.  */ public enum ScheduledStatus {      ENABLE(0, "禁用"),     DISABLE(1, "启用");      private int code;     private String name;      ScheduledStatus(int code, String name){         this.code = code;         this.name = name;     }      public static ScheduledStatus getByCode(int code){         for (ScheduledStatus st : values()) {             if(code == st.getCode())                 return st;         }         return null;     }      public int getCode() {         return code;     }      public String getName() {         return name;     }  } </code></pre> <p>2.2.4 定时任务公共父接口</p> <pre><code class="language-java">package com.yihaocard.main.scheduled;  /**  * @ClassName ScheduledTaskJob  * @Description 创建调度任务公共父接口  * @Author lv617  * @Date 2020/9/8 10:43  * @Version 1.0  */ public interface ScheduledTaskJob extends Runnable{ } </code></pre> <p>2.2.5&nbsp;定时任务实现类(处理具体的定时任务逻辑)</p> <p>注:本文档由于篇幅限制,只写两个空的实现类作为演示用;</p> <pre><code class="language-java">package com.yihaocard.main.scheduled.impl;  import com.yihaocard.main.scheduled.ScheduledTaskJob; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  /**  * @ClassName ScheduledTaskJob01  * @Description 测试类01  * @Author lv617  * @Date 2020/9/8 10:46  * @Version 1.0  */ @Slf4j @Service public class ScheduledTaskJob01 implements ScheduledTaskJob {      @Override     public void run() {         // TODO 要处理的业务逻辑         log.info("ScheduledTask =&gt; 01  run  当前线程名称 {} ", Thread.currentThread().getName());     } } </code></pre> <pre><code class="language-java">package com.yihaocard.main.scheduled.impl;  import com.yihaocard.main.scheduled.ScheduledTaskJob; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service;  /**  * @ClassName ScheduledTaskJob01  * @Description 测试类02  * @Author lv617  * @Date 2020/9/8 10:46  * @Version 1.0  */ @Slf4j @Service public class ScheduledTaskJob02 implements ScheduledTaskJob {      @Override     public void run() {         // TODO 要处理的业务逻辑         log.info("ScheduledTask =&gt; 02  run  当前线程名称 {} ", Thread.currentThread().getName());     } } </code></pre> <p>2.2.6&nbsp;定时任务管理接口(重要)</p> <pre><code class="language-java">package com.yihaocard.main.scheduled;  import com.yihaocard.main.module.scheduled.model.Scheduled;  /**  * @ClassName ScheduledTaskService  * @Description 定时任务接口  * @Author lv617  * @Date 2020/9/8 10:51  * @Version 1.0  */ public interface ScheduledTaskService {      /**      * 根据任务key 启动任务      */     Boolean start(String taskKey, Scheduled scheduled);      /**      * 根据任务key 停止任务      */     Boolean stop(String taskKey);      /**      * 根据任务key 重启任务      */     Boolean restart(String taskKey, Scheduled scheduled);      /**      * 初始化  ==&gt; 启动所有正常状态的任务      */     void initAllTask(); } </code></pre> <p>2.2.7&nbsp;定时任务管理实现类(重要)</p> <pre><code class="language-java">package com.yihaocard.main.scheduled.impl;  import com.yihaocard.main.module.scheduled.dao.ScheduledMapper; import com.yihaocard.main.module.scheduled.model.Scheduled; import com.yihaocard.main.module.scheduled.model.ScheduledExample; import com.yihaocard.main.scheduled.ScheduledTaskJob; import com.yihaocard.main.scheduled.ScheduledTaskService; import com.yihaocard.main.scheduled.constant.ScheduledStatus; import com.yihaocard.main.springboot.SpringContext; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.scheduling.TriggerContext; import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler; import org.springframework.scheduling.support.CronTrigger; import org.springframework.stereotype.Service;  import java.util.List; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ScheduledFuture; import java.util.concurrent.locks.ReentrantLock;  /**  * @ClassName ScheduledTaskServiceImpl  * @Description 定时任务实现  * @Author lv617  * @Date 2020/9/8 10:53  * @Version 1.0  */ @Slf4j @Service public class ScheduledTaskServiceImpl implements ScheduledTaskService {      @Value("${task.enabled}")     private Boolean taskEnable;      /**      * 可重入锁      */     private ReentrantLock lock = new ReentrantLock();     /**      * 定时任务线程池      */     @Autowired     private ThreadPoolTaskScheduler threadPoolTaskScheduler;      /**      * 存放已经启动的任务map      */     private Map&lt;String, ScheduledFuture&gt; scheduledFutureMap = new ConcurrentHashMap&lt;&gt;();      @Autowired     private ScheduledMapper scheduledMapper;      /**      * 描述: 根据任务key 启动任务      *      * @param taskKey      * @param scheduled      * @return java.lang.Boolean      * @author lv617      * @date 2020/9/24 11:16      */     @Override     public Boolean start(String taskKey, Scheduled scheduled) {         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 启动任务 {} 开始 &gt;&gt;&gt;&gt;&gt;&gt;", taskKey);         //添加锁放一个线程启动，防止多人启动多次         lock.lock();         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 添加任务启动锁完毕");         try {             //校验是否已经启动             if (this.isStart(taskKey)) {                 log.info("&gt;&gt;&gt;&gt;&gt;&gt; 当前任务已经启动，无需重复启动！");                 return false;             }             //查询配置             if(scheduled == null)                 scheduled = this.getByTaskKey(taskKey);             if(scheduled == null)                 return false;             //启动任务             this.doStartTask(scheduled);         } finally {             // 释放锁             lock.unlock();             log.info("&gt;&gt;&gt;&gt;&gt;&gt; 释放任务启动锁完毕");         }         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 启动任务 {} 结束 &gt;&gt;&gt;&gt;&gt;&gt;", taskKey);         return true;     }      /**      * 描述: 查询定时任务配置参数      *      * @param taskKey      * @return com.yihaocard.main.module.scheduled.model.Scheduled      * @author lv617      * @date 2020/9/24 11:14      */     private Scheduled getByTaskKey(String taskKey) {         ScheduledExample scheduledExample = new ScheduledExample();         scheduledExample.createCriteria()                 .andStatusEqualTo(ScheduledStatus.DISABLE.getCode())                 .andTaskKeyEqualTo(taskKey);         List&lt;Scheduled&gt; scheduleds = scheduledMapper.selectByExample(scheduledExample);         if(scheduleds == null || scheduleds.size() &lt; 1)             return null;         return scheduleds.get(0);     }      /**      * 描述: 根据 key 停止任务      *      * @param taskKey      * @return java.lang.Boolean      * @author lv617      * @date 2020/9/24 11:17      */     @Override     public Boolean stop(String taskKey) {         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 进入停止任务 {}  &gt;&gt;&gt;&gt;&gt;&gt;", taskKey);         //当前任务实例是否存在         boolean taskStartFlag = scheduledFutureMap.containsKey(taskKey);         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 当前任务实例是否存在 {}", taskStartFlag);         if (taskStartFlag) {             //获取任务实例             ScheduledFuture scheduledFuture = scheduledFutureMap.get(taskKey);             //关闭实例             boolean cancel = scheduledFuture.cancel(true);             log.info("cancel:{}", cancel);             //删除关闭的任务实例             scheduledFutureMap.remove(taskKey);         }         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 结束停止任务 {}  &gt;&gt;&gt;&gt;&gt;&gt;", taskKey);         return taskStartFlag;     }      /**      * 描述: 根据任务key 重启任务      *      * @param taskKey      * @param scheduled      * @return java.lang.Boolean      * @author lv617      * @date 2020/9/24 11:18      */     @Override     public Boolean restart(String taskKey, Scheduled scheduled) {         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 进入重启任务 {}  &gt;&gt;&gt;&gt;&gt;&gt;", taskKey);         //先停止         this.stop(taskKey);         //查询配置         if(scheduled == null)             scheduled = this.getByTaskKey(taskKey);         if(scheduled == null)             return false;         //再启动         return this.start(taskKey,scheduled);     }      /**      * 初始化  ==&gt; 启动所有正常状态的任务      */     @Override     public void initAllTask() {         if(!taskEnable){             log.info("配置文件禁用了定时任务----");             return;         }         ScheduledExample scheduledExample = new ScheduledExample();         scheduledExample.createCriteria()                 .andStatusEqualTo(ScheduledStatus.DISABLE.getCode());         List&lt;Scheduled&gt; scheduleds = scheduledMapper.selectByExample(scheduledExample);         log.info("初始化  ==&gt; 启动所有正常状态的任务开始 ！size={}", scheduleds == null ? 0 : scheduleds.size());         if (scheduleds == null || scheduleds.size() &lt; 1) {             return;         }         for (Scheduled scheduled : scheduleds) {             //任务 key             String taskKey = scheduled.getTaskKey();             //校验是否已经启动             if (this.isStart(taskKey)) {                 // 重启任务                 this.restart(taskKey,scheduled);             } else {                 // 启动任务                 this.doStartTask(scheduled);             }         }         log.info("初始化  ==&gt; 启动所有正常状态的任务结束 ！");     }      /**      * 执行启动任务      */     private void doStartTask(Scheduled scheduled) {         if (scheduled == null)             return;         //任务key         String taskKey = scheduled.getTaskKey();         //定时表达式         String taskCron = scheduled.getCron();         //获取需要定时调度的接口         ScheduledTaskJob scheduledTaskJob = (ScheduledTaskJob) SpringContext.getBean(taskKey);         log.info("&gt;&gt;&gt;&gt;&gt;&gt; 任务 [ {} ] ,cron={}", scheduled.getName(), taskCron);         ScheduledFuture scheduledFuture = threadPoolTaskScheduler.schedule(scheduledTaskJob, (TriggerContext triggerContext) -&gt; new CronTrigger(taskCron).nextExecutionTime(triggerContext));         //将启动的任务放入 map         scheduledFutureMap.put(taskKey, scheduledFuture);     }      /**      * 任务是否已经启动      */     private Boolean isStart(String taskKey) {         //校验是否已经启动         if (scheduledFutureMap.containsKey(taskKey)) {             if (!scheduledFutureMap.get(taskKey).isCancelled()) {                 return true;             }         }         return false;     }  } </code></pre> <p>3. 效果展示</p> <p>3.1 定时任务初始配置</p> <p><img decoding="async" alt="" height="95" src="http://img.555519.xyz/uploads/20230109/5a0af97b5268d9f010dcc75e5fcf1b91.jpg"></p> <p>3.2 启动项目</p> <p><img decoding="async" alt="" height="395" src="http://img.555519.xyz/uploads/20230109/04155c1301f18ac6fc7402d79e8333ab.jpg"></p> <p>3.3 后台管理修改定时任务</p> <p>注:后台定时任务管理页面就是展示数据库scheduled表数据,提交修改就是更新数据库数据并调用ScheduledTaskService类的restart()方法,这里的简单逻辑就不在赘述了!</p> <p>3.3.1 修改前</p> <p><img loading="lazy" decoding="async" alt="" height="414" src="http://img.555519.xyz/uploads/20230109/fad7147f7f5e64fe9360ad6688be34bb.jpg"></p> <p>3.3.2 编辑修改</p> <p><img loading="lazy" decoding="async" alt="" height="406" src="http://img.555519.xyz/uploads/20230109/0bd4816f74c954e4af3e120d32c8c4da.jpg"></p> <p>3.3.3 提交修改</p> <p><img loading="lazy" decoding="async" alt="" height="868" src="http://img.555519.xyz/uploads/20230109/6fea5365edc8939d57907a61a8c5886b.jpg"></p> <p>至此,已完整的实现了动态的定时任务修改/重启/关闭的功能!</p> <p>4. 补充Scheduled和ScheduledExample两个类</p> <pre><code class="language-java">package com.yihaocard.main.module.scheduled.model;  import java.time.LocalDateTime; import lombok.Data; import lombok.experimental.Accessors;  /**  * scheduled  */ @Accessors(chain = true) @Data public class Scheduled {     /**      * scheduled.id      */     private Integer id;      /**      * scheduled.task_key      * 任务key值（使用bean名称）      */     private String taskKey;      /**      * scheduled.name      * 任务名称      */     private String name;      /**      * scheduled.cron      * 任务表达式      */     private String cron;      /**      * scheduled.status      * 状态(0.禁用; 1.启用)      */     private Integer status;      /**      * scheduled.create_time      * 创建时间      */     private LocalDateTime createTime;      /**      * scheduled.update_time      * 更新时间      */     private LocalDateTime updateTime; }</code></pre> <pre><code class="language-java">package com.yihaocard.main.module.scheduled.model;  import java.time.LocalDateTime; import java.util.ArrayList; import java.util.List;  public class ScheduledExample {     /**      * scheduled      */     protected String orderByClause;      /**      * scheduled      */     protected boolean distinct;      /**      * scheduled      */     protected List&lt;Criteria&gt; oredCriteria;      /**      * This method corresponds to the database table scheduled      */     public ScheduledExample() {         oredCriteria = new ArrayList&lt;Criteria&gt;();     }      /**      * This method corresponds to the database table scheduled      */     public void setOrderByClause(String orderByClause) {         this.orderByClause = orderByClause;     }      /**      * This method corresponds to the database table scheduled      */     public String getOrderByClause() {         return orderByClause;     }      /**      * This method corresponds to the database table scheduled      */     public void setDistinct(boolean distinct) {         this.distinct = distinct;     }      /**      * This method corresponds to the database table scheduled      */     public boolean isDistinct() {         return distinct;     }      /**      * This method corresponds to the database table scheduled      */     public List&lt;Criteria&gt; getOredCriteria() {         return oredCriteria;     }      /**      * This method corresponds to the database table scheduled      */     public void or(Criteria criteria) {         oredCriteria.add(criteria);     }      /**      * This method corresponds to the database table scheduled      */     public Criteria or() {         Criteria criteria = createCriteriaInternal();         oredCriteria.add(criteria);         return criteria;     }      /**      * This method corresponds to the database table scheduled      */     public Criteria createCriteria() {         Criteria criteria = createCriteriaInternal();         if (oredCriteria.size() == 0) {             oredCriteria.add(criteria);         }         return criteria;     }      /**      * This method corresponds to the database table scheduled      */     protected Criteria createCriteriaInternal() {         Criteria criteria = new Criteria();         return criteria;     }      /**      * This method corresponds to the database table scheduled      */     public void clear() {         oredCriteria.clear();         orderByClause = null;         distinct = false;     }      /**      * This class corresponds to the database table scheduled      */     protected abstract static class GeneratedCriteria {         protected List&lt;Criterion&gt; criteria;          protected GeneratedCriteria() {             super();             criteria = new ArrayList&lt;Criterion&gt;();         }          public boolean isValid() {             return criteria.size() &gt; 0;         }          public List&lt;Criterion&gt; getAllCriteria() {             return criteria;         }          public List&lt;Criterion&gt; getCriteria() {             return criteria;         }          protected void addCriterion(String condition) {             if (condition == null) {                 throw new RuntimeException("Value for condition cannot be null");             }             criteria.add(new Criterion(condition));         }          protected void addCriterion(String condition, Object value, String property) {             if (value == null) {                 throw new RuntimeException("Value for " + property + " cannot be null");             }             criteria.add(new Criterion(condition, value));         }          protected void addCriterion(String condition, Object value1, Object value2, String property) {             if (value1 == null || value2 == null) {                 throw new RuntimeException("Between values for " + property + " cannot be null");             }             criteria.add(new Criterion(condition, value1, value2));         }          public Criteria andIdIsNull() {             addCriterion("id is null");             return (Criteria) this;         }          public Criteria andIdIsNotNull() {             addCriterion("id is not null");             return (Criteria) this;         }          public Criteria andIdEqualTo(Integer value) {             addCriterion("id =", value, "id");             return (Criteria) this;         }          public Criteria andIdNotEqualTo(Integer value) {             addCriterion("id &lt;&gt;", value, "id");             return (Criteria) this;         }          public Criteria andIdGreaterThan(Integer value) {             addCriterion("id &gt;", value, "id");             return (Criteria) this;         }          public Criteria andIdGreaterThanOrEqualTo(Integer value) {             addCriterion("id &gt;=", value, "id");             return (Criteria) this;         }          public Criteria andIdLessThan(Integer value) {             addCriterion("id &lt;", value, "id");             return (Criteria) this;         }          public Criteria andIdLessThanOrEqualTo(Integer value) {             addCriterion("id &lt;=", value, "id");             return (Criteria) this;         }          public Criteria andIdIn(List&lt;Integer&gt; values) {             addCriterion("id in", values, "id");             return (Criteria) this;         }          public Criteria andIdNotIn(List&lt;Integer&gt; values) {             addCriterion("id not in", values, "id");             return (Criteria) this;         }          public Criteria andIdBetween(Integer value1, Integer value2) {             addCriterion("id between", value1, value2, "id");             return (Criteria) this;         }          public Criteria andIdNotBetween(Integer value1, Integer value2) {             addCriterion("id not between", value1, value2, "id");             return (Criteria) this;         }          public Criteria andTaskKeyIsNull() {             addCriterion("task_key is null");             return (Criteria) this;         }          public Criteria andTaskKeyIsNotNull() {             addCriterion("task_key is not null");             return (Criteria) this;         }          public Criteria andTaskKeyEqualTo(String value) {             addCriterion("task_key =", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyNotEqualTo(String value) {             addCriterion("task_key &lt;&gt;", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyGreaterThan(String value) {             addCriterion("task_key &gt;", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyGreaterThanOrEqualTo(String value) {             addCriterion("task_key &gt;=", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyLessThan(String value) {             addCriterion("task_key &lt;", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyLessThanOrEqualTo(String value) {             addCriterion("task_key &lt;=", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyLike(String value) {             addCriterion("task_key like", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyNotLike(String value) {             addCriterion("task_key not like", value, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyIn(List&lt;String&gt; values) {             addCriterion("task_key in", values, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyNotIn(List&lt;String&gt; values) {             addCriterion("task_key not in", values, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyBetween(String value1, String value2) {             addCriterion("task_key between", value1, value2, "taskKey");             return (Criteria) this;         }          public Criteria andTaskKeyNotBetween(String value1, String value2) {             addCriterion("task_key not between", value1, value2, "taskKey");             return (Criteria) this;         }          public Criteria andNameIsNull() {             addCriterion("name is null");             return (Criteria) this;         }          public Criteria andNameIsNotNull() {             addCriterion("name is not null");             return (Criteria) this;         }          public Criteria andNameEqualTo(String value) {             addCriterion("name =", value, "name");             return (Criteria) this;         }          public Criteria andNameNotEqualTo(String value) {             addCriterion("name &lt;&gt;", value, "name");             return (Criteria) this;         }          public Criteria andNameGreaterThan(String value) {             addCriterion("name &gt;", value, "name");             return (Criteria) this;         }          public Criteria andNameGreaterThanOrEqualTo(String value) {             addCriterion("name &gt;=", value, "name");             return (Criteria) this;         }          public Criteria andNameLessThan(String value) {             addCriterion("name &lt;", value, "name");             return (Criteria) this;         }          public Criteria andNameLessThanOrEqualTo(String value) {             addCriterion("name &lt;=", value, "name");             return (Criteria) this;         }          public Criteria andNameLike(String value) {             addCriterion("name like", value, "name");             return (Criteria) this;         }          public Criteria andNameNotLike(String value) {             addCriterion("name not like", value, "name");             return (Criteria) this;         }          public Criteria andNameIn(List&lt;String&gt; values) {             addCriterion("name in", values, "name");             return (Criteria) this;         }          public Criteria andNameNotIn(List&lt;String&gt; values) {             addCriterion("name not in", values, "name");             return (Criteria) this;         }          public Criteria andNameBetween(String value1, String value2) {             addCriterion("name between", value1, value2, "name");             return (Criteria) this;         }          public Criteria andNameNotBetween(String value1, String value2) {             addCriterion("name not between", value1, value2, "name");             return (Criteria) this;         }          public Criteria andCronIsNull() {             addCriterion("cron is null");             return (Criteria) this;         }          public Criteria andCronIsNotNull() {             addCriterion("cron is not null");             return (Criteria) this;         }          public Criteria andCronEqualTo(String value) {             addCriterion("cron =", value, "cron");             return (Criteria) this;         }          public Criteria andCronNotEqualTo(String value) {             addCriterion("cron &lt;&gt;", value, "cron");             return (Criteria) this;         }          public Criteria andCronGreaterThan(String value) {             addCriterion("cron &gt;", value, "cron");             return (Criteria) this;         }          public Criteria andCronGreaterThanOrEqualTo(String value) {             addCriterion("cron &gt;=", value, "cron");             return (Criteria) this;         }          public Criteria andCronLessThan(String value) {             addCriterion("cron &lt;", value, "cron");             return (Criteria) this;         }          public Criteria andCronLessThanOrEqualTo(String value) {             addCriterion("cron &lt;=", value, "cron");             return (Criteria) this;         }          public Criteria andCronLike(String value) {             addCriterion("cron like", value, "cron");             return (Criteria) this;         }          public Criteria andCronNotLike(String value) {             addCriterion("cron not like", value, "cron");             return (Criteria) this;         }          public Criteria andCronIn(List&lt;String&gt; values) {             addCriterion("cron in", values, "cron");             return (Criteria) this;         }          public Criteria andCronNotIn(List&lt;String&gt; values) {             addCriterion("cron not in", values, "cron");             return (Criteria) this;         }          public Criteria andCronBetween(String value1, String value2) {             addCriterion("cron between", value1, value2, "cron");             return (Criteria) this;         }          public Criteria andCronNotBetween(String value1, String value2) {             addCriterion("cron not between", value1, value2, "cron");             return (Criteria) this;         }          public Criteria andStatusIsNull() {             addCriterion("status is null");             return (Criteria) this;         }          public Criteria andStatusIsNotNull() {             addCriterion("status is not null");             return (Criteria) this;         }          public Criteria andStatusEqualTo(Integer value) {             addCriterion("status =", value, "status");             return (Criteria) this;         }          public Criteria andStatusNotEqualTo(Integer value) {             addCriterion("status &lt;&gt;", value, "status");             return (Criteria) this;         }          public Criteria andStatusGreaterThan(Integer value) {             addCriterion("status &gt;", value, "status");             return (Criteria) this;         }          public Criteria andStatusGreaterThanOrEqualTo(Integer value) {             addCriterion("status &gt;=", value, "status");             return (Criteria) this;         }          public Criteria andStatusLessThan(Integer value) {             addCriterion("status &lt;", value, "status");             return (Criteria) this;         }          public Criteria andStatusLessThanOrEqualTo(Integer value) {             addCriterion("status &lt;=", value, "status");             return (Criteria) this;         }          public Criteria andStatusIn(List&lt;Integer&gt; values) {             addCriterion("status in", values, "status");             return (Criteria) this;         }          public Criteria andStatusNotIn(List&lt;Integer&gt; values) {             addCriterion("status not in", values, "status");             return (Criteria) this;         }          public Criteria andStatusBetween(Integer value1, Integer value2) {             addCriterion("status between", value1, value2, "status");             return (Criteria) this;         }          public Criteria andStatusNotBetween(Integer value1, Integer value2) {             addCriterion("status not between", value1, value2, "status");             return (Criteria) this;         }          public Criteria andCreateTimeIsNull() {             addCriterion("create_time is null");             return (Criteria) this;         }          public Criteria andCreateTimeIsNotNull() {             addCriterion("create_time is not null");             return (Criteria) this;         }          public Criteria andCreateTimeEqualTo(LocalDateTime value) {             addCriterion("create_time =", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeNotEqualTo(LocalDateTime value) {             addCriterion("create_time &lt;&gt;", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeGreaterThan(LocalDateTime value) {             addCriterion("create_time &gt;", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeGreaterThanOrEqualTo(LocalDateTime value) {             addCriterion("create_time &gt;=", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeLessThan(LocalDateTime value) {             addCriterion("create_time &lt;", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeLessThanOrEqualTo(LocalDateTime value) {             addCriterion("create_time &lt;=", value, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeIn(List&lt;LocalDateTime&gt; values) {             addCriterion("create_time in", values, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeNotIn(List&lt;LocalDateTime&gt; values) {             addCriterion("create_time not in", values, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeBetween(LocalDateTime value1, LocalDateTime value2) {             addCriterion("create_time between", value1, value2, "createTime");             return (Criteria) this;         }          public Criteria andCreateTimeNotBetween(LocalDateTime value1, LocalDateTime value2) {             addCriterion("create_time not between", value1, value2, "createTime");             return (Criteria) this;         }          public Criteria andUpdateTimeIsNull() {             addCriterion("update_time is null");             return (Criteria) this;         }          public Criteria andUpdateTimeIsNotNull() {             addCriterion("update_time is not null");             return (Criteria) this;         }          public Criteria andUpdateTimeEqualTo(LocalDateTime value) {             addCriterion("update_time =", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeNotEqualTo(LocalDateTime value) {             addCriterion("update_time &lt;&gt;", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeGreaterThan(LocalDateTime value) {             addCriterion("update_time &gt;", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeGreaterThanOrEqualTo(LocalDateTime value) {             addCriterion("update_time &gt;=", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeLessThan(LocalDateTime value) {             addCriterion("update_time &lt;", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeLessThanOrEqualTo(LocalDateTime value) {             addCriterion("update_time &lt;=", value, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeIn(List&lt;LocalDateTime&gt; values) {             addCriterion("update_time in", values, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeNotIn(List&lt;LocalDateTime&gt; values) {             addCriterion("update_time not in", values, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeBetween(LocalDateTime value1, LocalDateTime value2) {             addCriterion("update_time between", value1, value2, "updateTime");             return (Criteria) this;         }          public Criteria andUpdateTimeNotBetween(LocalDateTime value1, LocalDateTime value2) {             addCriterion("update_time not between", value1, value2, "updateTime");             return (Criteria) this;         }     }      /**      * scheduled      */     public static class Criteria extends GeneratedCriteria {          protected Criteria() {             super();         }     }      /**      * This class corresponds to the database table scheduled      */     public static class Criterion {         private String condition;          private Object value;          private Object secondValue;          private boolean noValue;          private boolean singleValue;          private boolean betweenValue;          private boolean listValue;          private String typeHandler;          public String getCondition() {             return condition;         }          public Object getValue() {             return value;         }          public Object getSecondValue() {             return secondValue;         }          public boolean isNoValue() {             return noValue;         }          public boolean isSingleValue() {             return singleValue;         }          public boolean isBetweenValue() {             return betweenValue;         }          public boolean isListValue() {             return listValue;         }          public String getTypeHandler() {             return typeHandler;         }          protected Criterion(String condition) {             super();             this.condition = condition;             this.typeHandler = null;             this.noValue = true;         }          protected Criterion(String condition, Object value, String typeHandler) {             super();             this.condition = condition;             this.value = value;             this.typeHandler = typeHandler;             if (value instanceof List&lt;?&gt;) {                 this.listValue = true;             } else {                 this.singleValue = true;             }         }          protected Criterion(String condition, Object value) {             this(condition, value, null);         }          protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {             super();             this.condition = condition;             this.value = value;             this.secondValue = secondValue;             this.typeHandler = typeHandler;             this.betweenValue = true;         }          protected Criterion(String condition, Object value, Object secondValue) {             this(condition, value, secondValue, null);         }     } }</code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26698.htm">宠物批发零售网站有哪些（宠物批发商）</a></p>
                                        <p>下一个：<a href="/news/article-27166.htm">数据结构详解·一树的初步</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-18898.htm" title="宠物用品批发零售（宠物用品批发连锁）">宠物用品批发零售（宠物用品批发连锁）</a></li>
                        <li class="py-2"><a href="/news/article-26698.htm" title="宠物批发零售网站有哪些（宠物批发商）">宠物批发零售网站有哪些（宠物批发商）</a></li>
                        <li class="py-2"><a href="/news/article-26697.htm" title="动物防疫工作计划（动物防疫工作计划表）">动物防疫工作计划（动物防疫工作计划表）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-free-node-subscribe-links.htm" title="「12月17日」最高速度20.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费机场订阅节点链接">「12月17日」最高速度20.7M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-10-hiddify-next-node.htm" title="「12月10日」最高速度22.6M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费机场订阅节点链接">「12月10日」最高速度22.6M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-1-free-high-speed-nodes.htm" title="「11月1日」最高速度21.6M/S，2024年Shadowrocket/SSR/V2ray/Clash每天更新免费机场订阅节点链接">「11月1日」最高速度21.6M/S，2024年Shadowrocket/SSR/V2ray/Clash每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-2-today-hiddify-next-node.htm" title="「10月2日」最高速度22M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅节点链接">「10月2日」最高速度22M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-hiddify-next-windows.htm" title="「11月13日」最高速度20.4M/S，2024年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅节点链接">「11月13日」最高速度20.4M/S，2024年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-hiddify-next-node.htm" title="「10月10日」最高速度18M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费机场订阅节点链接">「10月10日」最高速度18M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-15-today-hiddify-next-node.htm" title="「12月15日」最高速度20.4M/S，2024年SSR/V2ray/Clash/Shadowrocket每天更新免费机场订阅节点链接">「12月15日」最高速度20.4M/S，2024年SSR/V2ray/Clash/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">19</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <div class="footer">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">FreeSSRNode免费节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
      <!-- loader -->
      <div id="loader" class="show fullscreen">
          <svg class="circular" width="48px" height="48px">
              <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
              <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#51be78" />
          </svg>
      </div>
      <script src="/assets/website/js/frontend/freessrnode/jquery-3.5.1.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery-migrate-3.0.1.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery-ui.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/popper.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/bootstrap.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/owl.carousel.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.stellar.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.countdown.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/bootstrap-datepicker.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.easing.1.3.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/aos.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.fancybox.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.sticky.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.mb.YTPlayer.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/main.js"></script>
      <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
      <script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!-- .site-wrap -->
</body>

</html>