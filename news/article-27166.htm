<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freessrnode.github.io/news/article-27166.htm" />
    <title>数据结构详解·一树的初步</title>
        <meta name="description" content="「数据结构详解·一」树的初步   树(Tree)是最重要的数据结构之一，它是由         n         (         n         ∈         N         ) " />
        <link rel="icon" href="/assets/website/img/freessrnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="FreeSSRNode免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freessrnode.github.io/news/article-27166.htm" />
    <meta property="og:site_name" content="FreeSSRNode免费节点官网" />
    <meta property="og:title" content="数据结构详解·一树的初步" />
    <meta property="og:image" content="https://freessrnode.github.io/uploads/20240813/8e7b63ba1ab8e8484f80a52d6c44ee75.webp" />
        <meta property="og:release_date" content="2024-12-17T10:14:31" />
    <meta property="og:updated_time" content="2024-12-17T10:14:31" />
        <meta property="og:description" content="「数据结构详解·一」树的初步   树(Tree)是最重要的数据结构之一，它是由         n         (         n         ∈         N         ) " />
        
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="数据结构详解·一树的初步">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css?family=Muli:300,400,700,900" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/freessrnode/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/jquery-ui.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/jquery.fancybox.min.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/bootstrap-datepicker.css">
    <link rel="stylesheet" href="/assets/website/fonts/freessrnode/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/aos.css">
    <link href="/assets/website/css/freessrnode/jquery.mb.YTPlayer.min.css" media="all" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="/assets/website/css/freessrnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-2KPLB94DVG"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-2KPLB94DVG');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".site-navbar-target" data-offset="300" data-page="detail">
    <div class="site-wrap">
                <div class="site-mobile-menu site-navbar-target">
            <div class="site-mobile-menu-header">
                <div class="site-mobile-menu-close mt-3">
                    <span class="icon-close2 js-menu-toggle"></span>
                </div>
            </div>
            <div class="site-mobile-menu-body"></div>
        </div>
        <div class="py-2 bg-light">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-9 d-none d-lg-block">
                        
                    </div>
                </div>
            </div>
        </div>
        <header class="site-navbar py-4 js-sticky-header site-navbar-target" role="banner">
            <div class="container">
                <div class="d-flex align-items-center">
                    <div class="site-logo">
                                                <a href="/" class="d-block">
                            <span>Free SSR Node</span>
                        </a>
                                            </div>
                    <div class="mr-auto">
                        <nav class="site-navigation position-relative text-right" role="navigation">
                            <ul class="site-menu main-menu js-clone-nav mr-auto d-none d-lg-block">
                                                                <li>
                                    <a href="/" class="nav-link text-left">首页</a>
                                </li>
                                                                <li>
                                    <a href="/free-nodes/" class="nav-link text-left">免费节点</a>
                                </li>
                                                                <li>
                                    <a href="/paid-subscribe/" class="nav-link text-left">推荐机场</a>
                                </li>
                                                                <li>
                                    <a href="/news/" class="nav-link text-left">新闻资讯</a>
                                </li>
                                                                <li>
                                    <a href="#" class="nav-link text-left">关于</a>
                                </li>
                                <li>
                                    <a href="#" class="nav-link text-left">联系</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                    <div class="ml-auto">
                        <div class="social-wrap">
                            <a href="#"><span class="icon-facebook"></span></a>
                            <a href="#"><span class="icon-twitter"></span></a>
                            <a href="#"><span class="icon-linkedin"></span></a>
                            <a href="#" class="d-inline-block d-lg-none site-menu-toggle js-menu-toggle text-black"><span class="icon-menu h3"></span></a>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div class="intro-section small" style="background-image: url('/assets/website/img/freessrnode/hero_1.jpg');">
            <div class="container">
                <div class="row align-items-center justify-content-center">
                    <div class="col-md-7 mx-auto text-center" data-aos="fade-up">
                        <div class="intro">
                            <h1>数据结构详解·一树的初步</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="site-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="SSR Windows免费节点订阅站" data-url="https://ssrwindows.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <ul> <li><strong><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/Leo_Chenjy/article/details/126072521"  rel="nofollow">「数据结构详解·一」树的初步</a></strong></li> </ul> </h1> <p>树(Tree)是最重要的数据结构之一，它是由<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        n</p> <p>        (</p> <p>        n</p> <p>        ∈</p> <p>        N</p> <p>        )</p> <p>       n(n \in \mathbb{N})</span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathbb">N</span><span class="mclose">)</span></span></span></span></span> 个节点（也会被写作“结点”）构成的一个集合。其具有<strong>层次关系</strong>。树是<strong>递归定义</strong>的。<br /> 如下图，这就是一棵普通的树。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220818/29478f1d079b1cda019d5faaa53df30f.jpg" alt="数据结构详解·一树的初步"></p> <ul> <li>最上面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 称为<mark>根节点</mark>，最下面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>         ,</p> <p>         5</p> <p>         ,</p> <p>         6</p> <p>         ,</p> <p>         9</p> <p>         ,</p> <p>         8</p> <p>        4,5,6,9,8</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span></span></span></span></span> 称为<mark>叶子节点</mark>。</li> <li>每两个节点之间相连线的称为<mark>边</mark>。</li> <li><span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的下方与其相连的有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span>，我们就说，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 的<mark>父节点</mark>（父亲），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子节点</mark>（儿子），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 互为<mark>兄弟节点</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。我们认为，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>         ,</p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>        1,3,7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的<mark>祖先</mark>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>         ,</p> <p>         9</p> <p>        3,7,9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子孙</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 个子节点，我们认为，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>度</mark>是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span>。叶子结点的度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span>。</li> <li>度不为零的（非叶子节点）节点称为<mark>分支节点</mark>。</li> <li>一棵树的层数称为<mark>树的深度/树的高度</mark>。单独的根节点深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。图示的树的深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>        4</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">4</span></span></span></span></span>。</li> <li>空集合也是树，称为<mark>空树</mark>。其没有节点。</li> <li>假如去掉了根节点，可以发现，就形成了一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 的树，一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的树。我们认为这两棵树是根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的树的<mark>子树</mark>。假如这两棵树属于同一集合且不相交，我们就说这个集合时<mark>森林</mark>。</li> </ul> </h1> <ul> <li>一棵非空树<strong>有且只有一个根节点</strong>。</li> <li>每一个非根节点<strong>有且只有一个父节点</strong>。</li> <li>每一个叶子节点<strong>没有子节点</strong>。</li> <li>一棵树<strong>有且只有<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>          n</p> <p>          −</p> <p>          1</p> <p>         n-1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 条边</strong>。</li> </ul> </h1> <p>我们主要介绍其中两种。</p> <h2><a id="31__21" rel="nofollow"></a>3-1. 邻接矩阵</h2> <p>顾名思义，其是一个二维数组。<br /> 定义方式：</p> <pre><code class="prism language-cpp"><span class="token keyword">bool</span> tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p><span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>          i</p> <p>          ,</p> <p>          j</p> <p>       \text{tree}_{i,j}</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.9012em; vertical-align: -0.2861em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right: 0.0572em;">j</span></span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.2861em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 表示节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>        ,</p> <p>        j</p> <p>       i,j</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.854em; vertical-align: -0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.0572em;">j</span></span></span></span></span> 之间是否连通。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u][v]=1;</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center"></th> <th align="center">1</th> <th align="center">2</th> <th align="center">3</th> <th align="center">4</th> <th align="center">5</th> <th align="center">6</th> <th align="center">7</th> <th align="center">8</th> <th align="center">9</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">2</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">3</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> </tr> <tr> <td align="center">4</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">5</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">6</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">7</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> </tr> <tr> <td align="center">8</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">9</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> </tbody> </table> <p>访问所有节点的儿子：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接矩阵的优点：简洁明了，方便快捷；<br /> 邻接矩阵的缺点：浪费空间，容易被卡。<br /> 只建议数据中结点数<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        ≤</p> <p>        8</p> <p>        ×</p> <p>        1</p> <p>         0</p> <p>         3</p> <p>       \le 8\times 10^3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7719em; vertical-align: -0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.7278em; vertical-align: -0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8141em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 时使用。</p> <h2><a id="32__69" rel="nofollow"></a>3-2. 邻接表</h2> <p>我们也可以采用其中一种叫做<mark>邻接表</mark>的常用存储方法。<br /> 定义方式：</p> <pre><code class="prism language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>在<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>         i</p> <p>       \text{tree}_i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7651em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 的 vector 中，我们要存储什么呢？<br /> 没错，就是节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>       i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 的儿子。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u].push_back(v);</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center">节点编号</th> <th align="center">存储情况</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">2,3</td> </tr> <tr> <td align="center">2</td> <td align="center">4,5</td> </tr> <tr> <td align="center">3</td> <td align="center">6,7,8</td> </tr> <tr> <td align="center">4</td> <td align="center">(空)</td> </tr> <tr> <td align="center">5</td> <td align="center">(空)</td> </tr> <tr> <td align="center">6</td> <td align="center">(空)</td> </tr> <tr> <td align="center">7</td> <td align="center">9</td> </tr> <tr> <td align="center">8</td> <td align="center">(空)</td> </tr> <tr> <td align="center">9</td> <td align="center">(空)</td> </tr> </tbody> </table> <p>如果要访问，也很简单（示例代码为访问上述树的儿子）：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接表的优点在于：方便、省空间、速度较快，是通用的存储方法。</p> </h1> <h2><a id="41__117" rel="nofollow"></a>4-1. 先/前序(根)遍历（深度优先遍历）</h2> <p>先序遍历的遍历顺序是<strong>根→按序遍历子树</strong>。<br /> 类似于深度优先搜索，先序遍历就是一头猛扎到底，不到黄河不回头。<br /> 示例代码（输出树的先序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 4 5 3 6 7 9 8</code>。</p> <h2><a id="42__132" rel="nofollow"></a>4-2. 后序(根)遍历</h2> <p>后序遍历顺序和先序遍历相反，为<strong>按序遍历子树→根</strong>。<br /> 示例代码（输出树的后序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">post</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> 	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token comment">//可以发现，只是改动了输出位置</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>4 5 2 6 9 7 8 3 1</code>。</p> <h2><a id="43__147" rel="nofollow"></a>4-3. 层次遍历（宽/广度优先遍历）</h2> <p>层次遍历的写法类似广度优先搜索，使用队列存储节点，然后输出每一层的节点。<br /> 示例代码（输出树的层次遍历）：</p> <pre><code class="prism language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 			q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 3 4 5 6 7 8 9</code>。</p> <h2><a id="44__168" rel="nofollow"></a>4-4. 叶子节点遍历</h2> <p>顾名思义，只遍历叶子节点，那我们随便写就可以了。<br /> dfs 写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>bfs 写法：</p> <pre><code class="prism language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>枚举写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n 为节点数</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> </h1> <ol> <li>给定节点关系，输出先序、后序、层次、叶节点遍历的结果（根节点不一定是<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>）。</li> <li>给定节点关系，求树的深度。</li> <li>给定节点关系，求出两个节点相距距离最长是多少（父子节点的边算一个单位长度）。</li> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-27165.htm">基于springBoot动态配置定时任务</a></p>
                                        <p>下一个：<a href="/news/article-27632.htm">训练狗狗的29个基础动作（训练狗狗的29个基础动作教程）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-14-free-subscribe-node.htm" title="「1月14日」最高速度22.5M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅节点链接">「1月14日」最高速度22.5M/S，2025年SSR/V2ray/Shadowrocket/Clash每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-free-node-subscribe.htm" title="「11月21日」最高速度22.4M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费机场订阅节点链接">「11月21日」最高速度22.4M/S，2024年Shadowrocket/V2ray/SSR/Clash每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38612.htm" title="宠物美容师赚钱吗知乎（宠物美容师赚钱吗知乎）">宠物美容师赚钱吗知乎（宠物美容师赚钱吗知乎）</a></li>
                        <li class="py-2"><a href="/news/article-42572.htm" title="宠物领养中心是什么（宠物领养中心是什么部门）">宠物领养中心是什么（宠物领养中心是什么部门）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-29-free-subscribe-node.htm" title="「1月29日」最高速度20.4M/S，2025年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅节点链接">「1月29日」最高速度20.4M/S，2025年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-21165.htm" title="动物疫苗周期多长时间 动物疫苗周期多长时间打一次">动物疫苗周期多长时间 动物疫苗周期多长时间打一次</a></li>
                        <li class="py-2"><a href="/news/article-43079.htm" title="猫粮加工设备全套多少钱一套 猫粮加工设备全套多少钱一套啊">猫粮加工设备全套多少钱一套 猫粮加工设备全套多少钱一套啊</a></li>
                        <li class="py-2"><a href="/news/article-35064.htm" title="MySQL高级 之 explain执行计划详解（*）">MySQL高级 之 explain执行计划详解（*）</a></li>
                        <li class="py-2"><a href="/news/article-41099.htm" title="猫咪去跳蚤最简单的方法可以剪掉它的毛?（猫去跳蚤用什么药好）">猫咪去跳蚤最简单的方法可以剪掉它的毛?（猫去跳蚤用什么药好）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-free-node-subscribe.htm" title="「1月30日」最高速度21.8M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅节点链接">「1月30日」最高速度21.8M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <div class="footer">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">FreeSSRNode免费节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
      <!-- loader -->
      <div id="loader" class="show fullscreen">
          <svg class="circular" width="48px" height="48px">
              <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
              <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#51be78" />
          </svg>
      </div>
      <script src="/assets/website/js/frontend/freessrnode/jquery-3.5.1.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery-migrate-3.0.1.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery-ui.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/popper.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/bootstrap.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/owl.carousel.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.stellar.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.countdown.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/bootstrap-datepicker.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.easing.1.3.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/aos.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.fancybox.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.sticky.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/jquery.mb.YTPlayer.min.js"></script>
      <script src="/assets/website/js/frontend/freessrnode/main.js"></script>
      <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
      <script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!-- .site-wrap -->
</body>

</html>